#!/bin/sh

# This script builds squashfs-tools-ng packages inside a Docker
# instance.
#
# It can build packages for:
#
#  * alpine
#  * archlinux
#  * centos
#  * fedora
#  * debian
#  * ubuntu
#  * opensuse
#
# Currently it can only build package from a release (tag from github).
#
# TODO: Find a way to build packages from git checkout sources

# Path to the source directory mounted in the Docker instance.
ROOT_RO=/source-ro

# Path to which packages will be copied after a successful build.
OUTPUT=/output

. /etc/os-release

build_alpine() {
    build_root=/tmp/source
    cp -r /source-ro/packages/APKBUILD .

    abuild-keygen -nai
    abuild -r

    cp -r ~/packages/home/* ~/abuild /output
    
}



build_archlinux() {
    mkdir build
    cd build
    
    cp -r /source-ro/packages/PKGBUILD .
    makepkg --noconfirm -Cfsir PKGBUILD

    cp * /output
}



build_deb() {
    # unreleased versions have no codename
    if test -z "${VERSION_CODENAME}"; then
	VERSION_CODENAME=$release
    fi

    # Use s specific directory, this make easier to copy package files
    # to file output directory later.
    mkdir build
    cd build
    
    # Fetch sources
    wget \
	https://github.com/AgentD/squashfs-tools-ng/archive/v$version/squashfs-tools-ng-$version.tar.gz \
	-O squashfs-tools-ng_$version.orig.tar.gz

    # Prepare sources
    tar xfz squashfs-tools-ng_$version.orig.tar.gz
    cd squashfs-tools-ng-$version
    cp -r /source-ro/packages/debian .

    # Update debian version and add codename to it
    DEBFULLNAME="$USER" DEBEMAIL="$USER@localhost" \
	       dch -v $version-1$VERSION_CODENAME \
	       -D $VERSION_CODENAME "Build $version for $VERSION_CODENAME."

    # Figure out debhelper version
    dhv=$(apt-cache policy debhelper | grep Candidate: |\
	      awk '{print $2}' | cut -d. -f1 | head -n1)
    sed -i -e "s/@DEBHELPER_VERSION@/$dhv/" debian/control
    echo $dhv > debian/compat

    # libzstd-dev not present in trusty
    case "$VERSION_CODENAME" in
	trusty)
	    sed -i -e 's/libzstd-dev, //' debian/control
	    ;;
    esac

    # Generate build depends package
    mk-build-deps --install --remove \
		  --tool='apt-get --no-install-recommends --yes' \
		  --root-cmd sudo debian/control
    
    # mk-build-deps do not remove .buildinfo nor .changes files
    rm -f *-build-deps_*

    debuild
    #debuild -- clean
    
    cp ../* /output
}


build_rpm() {
    case "$ID" in
	centos)
	    if test $VERSION_ID -ge 8; then
		# install doxygen
		sudo sed -i 's/^enabled=.*/enabled=1/' \
		     /etc/yum.repos.d/CentOS-PowerTools.repo
		cat /etc/yum.repos.d/CentOS-PowerTools.repo
	    fi
	    ;;
    esac

    cp -r /source-ro/packages/squashfs-tools-ng.spec .
    rpmdev-setuptree
    spectool -g -R squashfs-tools-ng.spec
    rpmspec --parse squashfs-tools-ng.spec \
	| grep BuildRequires | cut -d' ' -f2  \
	| xargs sudo yum install -y
    rpmbuild --clean -ba squashfs-tools-ng.spec
    cp -r ~/rpmbuild/* /output

}


build_opensuse() {
    cp -r /source-ro/packages/squashfs-tools-ng.spec .

    # Fetch source
    rpmspec --parse squashfs-tools-ng.spec | grep Source0 \
	| awk '{print $2}' \
	| xargs  wget -N -P $(rpm --eval '%{_sourcedir}')

    # Install build requirements
    rpmspec --parse squashfs-tools-ng.spec | grep BuildRequires \
	| cut -d' ' -f2  \
	| xargs sudo zypper install -y
    
    rpmbuild --clean -ba squashfs-tools-ng.spec
    cp -r ~/rpmbuild/* /output
}







case "$ID" in
    alpine) build_alpine ;;
    archlinux|arch) build_archlinux ;;
    centos|fedora) build_rpm;;
    debian|ubuntu) build_deb;;
    opensuse|opensuse-leap) build_opensuse;;
    *) cat <<EOF >&2
Unsupported distro "$ID"
EOF
       exit 1
       ;;
esac
